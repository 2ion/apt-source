#!/usr/bin/env luajit

local Posix = require "posix"
local Apt = require "apt"
local Tx = require "pl.tablex"
local Sx = require "pl.stringx"
local Ut = require "pl.utils"

local Msg = {
  version = "0.1",
  help = [[apt-source
Copyright (C) 2014 Jens Oliver John <dev@2ion.de>
]]
}

local CLIOptions = {
  short = "hvmq:c:",
  long = {
    { "version", "none", "v" },
    { "help", "none", "h" },
    { "modify", "none", "m" },
    { "select", "none", "s" },
    { "query-table", "required", "q" },
    { "change-table", "required", "c" }
  }
}

local CLIEnv = {
  sid = "unstable",
  unstable = "unstable",
  experimental = "experimental",
  testing = "testing",
  wheezy = "stable",
  stable = "stable",
  jessie = "testing",
  ["non-free"] = "non-free",
  contrib = "contrib",
  main = "main",
  mirror = {}
}

local function extend_cli_env(sourcefile)
  local function import_transport_methods(e)
    if e.uri:match("^http://") or e.uri:match("^ftp://") then
      local hostname = e.uri:match("^[%w]+://(.*)$")
      hostname = hostname:sub(1, hostname:find("/", 1, true)-1)
      local country = hostname:match("ftp%.([%w][%w])%.debian%.org")
      if country and not CLIEnv.mirror[country] then
        CLIEnv.mirror[country] = e.uri
      end
    end
  end

  local function import_suites(e)
    if not CLIEnv[e.suite] then
      CLIEnv[e.suite] = e.suite
    end
  end

  local source = Apt.Source:init(sourcefile)
  if not source:is_ready() then return nil end

  source:foreach_do(function (e)
    import_suites(e)
    import_transport_methods(e)
  end)
end

local function spec2qtable(str)
  local function dostring(loader, str)
    local t = loader(str)
    if not t or type(t)~="function" then
      return nil
    end
    local v = t()
    if type(v)~="table" then
      return nil
    end
    return v
  end

  local function lloadfile(str)
    return loadfile(str, "bt", CLIEnv)
  end

  local function lloadstring(str)
    return load(str, "=(load)", "t", CLIEnv)
  end 

  if str:sub(1,1)=="@" then
    local str = str:sub(2,-1)
    return dostring(lloadfile, str)
  else
    local str = string.format("return{%s}", str)
    return dostring(lloadstring, str)
  end
end

local function TESTING()
  print("*** TESTING ***")
  extend_cli_env("sources.list")
  local qt = spec2qtable("suite=wheezy,uri=mirror.jp")
  print(qt.uri, qt.suite)
end

local function op_idle()
  return 0
end

-- TESTING()

-- main ()

local narg = 1
local op = op_idle
local ct, qt = nil, nil

for r, optarg, optind in Posix.getopt(arg, CLIOptions.short,
  CLIOptions.long) do
  if r=='?' then
    for _,v in ipairs(CLIOptions.long) do
      if v[3]==arg[optind-1]:sub(2,-1) then
        Ut.printf("Missing argument to option: %s\n", arg[optind-1])
        os.exit(1)
      end
    end
    Ut.printf("Unknown option: %s\n", arg[optind-1])
    os.exit(1)
  elseif r=='h' then
    print(Msg.help)
    os.exit(0)
  elseif r=='v' then
    print(Msg.version)
  elseif r=='m' then
    print(optarg)
  elseif r=='q' then
    qt = spec2qtable(optarg)
    assert(qt, "Invalid query table")
  elseif r=='c' then
    ct = spec2qtable(optarg)
    assert(ct, "Invalid change table")
  end
  li = optind
end

return op(ct, qt)
